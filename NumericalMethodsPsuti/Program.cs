// See https://aka.ms/new-console-template for more information

namespace NumericalMethodsPsuti;

class Program
{
    // Выполнил студент группы ИВТз-22У
    // Кулагин А.А.
    // Вариант № 11
    
    public static void Main(string[] args)
    {
        // Определяем матрицу коэффициентов и вектор свободных членов
        double[,] a = {
            {2.16, 1.96, 1.56},
            {3.55, 3.23, 2.78},
            {4.85, 4.47, 3.97}
        };
        
        double[] b = {13.16, 21.73, 29.75}; // Вектор правых частей системы
        double[] x = GaussianElimination(a, b); // Запускаем метод Гаусса для решения системы

        // Выводим решение системы на консоль
        Console.WriteLine("Решение:");
        for (int i = 0; i < x.Length; i++)
        {
            Console.WriteLine($"x{i + 1} = {x[i]:F4}"); // Выводим каждое значение x с точностью до 4 знаков после запятой
        }

        Console.ReadLine();
    }
    
    // Метод для решения системы уравнений методом Гаусса
    static double[] GaussianElimination(double[,] A, double[] b)
    {
        int n = A.GetLength(0); // Размерность системы (число строк или столбцов матрицы A)

        // Прямой ход метода Гаусса
        for (int k = 0; k < n; k++)
        {
            // Находим строку с максимальным элементом в текущем столбце (k) для улучшения точности
            int max = k;
            for (int i = k + 1; i < n; i++)
            {
                if (Math.Abs(A[i, k]) > Math.Abs(A[max, k]))
                {
                    max = i; // Если найден элемент больше текущего максимума, обновляем индекс max
                }
            }

            // Меняем строки местами, чтобы максимальный элемент оказался на диагонали
            for (int j = 0; j < n; j++)
            {
                double temp = A[k, j]; // Сохраняем значение текущего элемента для обмена
                A[k, j] = A[max, j];   // Заменяем элемент в строке k элементом из строки max
                A[max, j] = temp;      // Завершаем обмен
            }

            double tmp = b[k];    // Меняем также элементы векторa b
            b[k] = b[max];
            b[max] = tmp;

            // Прямой ход метода Гаусса: обнуляем элементы ниже диагонали в столбце k
            for (int i = k + 1; i < n; i++)
            {
                double factor = A[i, k] / A[k, k]; // Вычисляем коэффициент для текущей строки
                b[i] -= factor * b[k];             // Корректируем элемент вектора b
                for (int j = k; j < n; j++)
                {
                    A[i, j] -= factor * A[k, j];   // Вычитаем из текущего элемента скорректированное значение
                }
            }
        }

        // Обратный ход метода Гаусса: находим значения переменных, начиная с конца
        double[] x = new double[n];
        for (int i = n - 1; i >= 0; i--)
        {
            double sum = 0;
            for (int j = i + 1; j < n; j++)
            {
                sum += A[i, j] * x[j]; // Накапливаем сумму произведений известных переменных и коэффициентов
            }
            x[i] = (b[i] - sum) / A[i, i]; // Вычисляем значение переменной, учитывая накопленную сумму
        }

        return x; // Возвращаем массив решений
    }
}